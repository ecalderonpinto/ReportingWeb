package com.entities.entity.reportingtool;

// Generated 11-feb-2015 17:15:14 by Hibernate Tools 4.0.0

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Version;

import com.entities.utilities.hibernate.VersionAuditor;
import com.entities.utilities.hibernate.VersionableAdapter;

/**
 * ReportCustom generated by hbm2java
 */
@Entity
@Table(name = "T_REPORT_CUSTOM")
public class ReportCustom implements VersionableAdapter {

	private long id;
	private ReportCatalog reportCatalog;
	private Company company;
	private ReportField reportField;
	private String reportCustomName;
	private String reportCustomPath;

	@Embedded
	private VersionAuditor versionAuditor;
	@Version
	@Column(name = "VERSION", nullable = false)
	int version;

	public ReportCustom() {
	}

	public ReportCustom(long reportCustomId, Company company,
			String reportCustomName, VersionAuditor versionAuditor) {
		this.id = reportCustomId;
		this.company = company;
		this.reportCustomName = reportCustomName;
		this.versionAuditor = versionAuditor;
	}

	public ReportCustom(ReportCatalog reportCatalog, Company company,
			ReportField reportField, String reportCustomName,
			String reportCustomPath, VersionAuditor versionAuditor) {
		this.reportCatalog = reportCatalog;
		this.company = company;
		this.reportField = reportField;
		this.reportCustomName = reportCustomName;
		this.reportCustomPath = reportCustomPath;
		this.versionAuditor = versionAuditor;
	}

	@Id
	@SequenceGenerator(name = "GEN_REPORT_CUSTOM", sequenceName = "SEQ_REPORT_CUSTOM", initialValue = 1, allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GEN_REPORT_CUSTOM")
	@Column(name = "REPORT_CUSTOM_ID", unique = true, nullable = false, length = 10)
	public long getId() {
		return this.id;
	}

	public void setId(long reportCustomId) {
		this.id = reportCustomId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "REPORT_CATALOG_ID", foreignKey = @ForeignKey(name = "T_REPORT_CUST_FK_CATALOG"))
	public ReportCatalog getReportCatalog() {
		return this.reportCatalog;
	}

	public void setReportCatalog(ReportCatalog reportCatalog) {
		this.reportCatalog = reportCatalog;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "COMPANY_ID", nullable = false, foreignKey = @ForeignKey(name = "T_REPORT_CUST_FK_COMPANY"))
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "REPORT_FIELD_ID", foreignKey = @ForeignKey(name = "T_REPORT_CUST_FK_FIELD"))
	public ReportField getReportField() {
		return this.reportField;
	}

	public void setReportField(ReportField reportField) {
		this.reportField = reportField;
	}

	@Column(name = "REPORT_CUSTOM_NAME", nullable = false)
	public String getReportCustomName() {
		return this.reportCustomName;
	}

	public void setReportCustomName(String reportCustomName) {
		this.reportCustomName = reportCustomName;
	}

	@Column(name = "REPORT_CUSTOM_PATH")
	public String getReportCustomPath() {
		return this.reportCustomPath;
	}

	public void setReportCustomPath(String reportCustomPath) {
		this.reportCustomPath = reportCustomPath;
	}

	public int getVersion() {
		return version;
	}

	public void setVersion(int version) {
		this.version = version;
	}

	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

	public VersionAuditor getAuditor() {
		return versionAuditor;
	}

	public void setAuditor(VersionAuditor _auditor) {
		this.versionAuditor = _auditor;
	}

	@Override
	public boolean equals(Object object) {
		if (object instanceof ReportCustom) {
			return ((ReportCustom) object).reportCatalog
					.equals(this.reportCatalog)
					&& ((ReportCustom) object).reportCustomName
							.equals(this.reportCustomName)
					&& ((ReportCustom) object).reportField
							.equals(this.reportField);

		}
		return false;
	}
}
