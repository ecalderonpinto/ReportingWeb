package com.entities.entity.reportingtool;

// Generated 11-feb-2015 16:49:54 by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Version;

import com.entities.utilities.hibernate.VersionAuditor;
import com.entities.utilities.hibernate.VersionableAdapter;

/**
 * Fund generated by hbm2java
 */
@Entity
@Table(name = "T_FUND")
public class Fund implements VersionableAdapter {

	private long id;
	private Company company;
	private String fundName;
	private String fundIsin;
	private String fundCode;
	private String fundDesc;
	private String fundClass;
	private Set<FundGroup> fundGroups = new HashSet(0);
	private Set<ReportExecution> reportExecutions = new HashSet(0);

	@Embedded
	private VersionAuditor versionAuditor;
	@Version
	@Column(name = "VERSION", nullable = false)
	int version;

	public Fund() {
	}

	public Fund(long fundId, Company company, String fundName,
			VersionAuditor versionAuditor) {
		this.id = fundId;
		this.company = company;
		this.fundName = fundName;
		this.versionAuditor = versionAuditor;
	}

	public Fund(Company company, String fundName, String fundIsin,
			String fundCode, String fundDesc, String fundClass,
			Set<FundGroup> fundGroups, Set<ReportExecution> reportExecutions,
			VersionAuditor versionAuditor) {
		this.company = company;
		this.fundName = fundName;
		this.fundIsin = fundIsin;
		this.fundCode = fundCode;
		this.fundDesc = fundDesc;
		this.fundClass = fundClass;
		this.fundGroups = fundGroups;
		this.reportExecutions = reportExecutions;
		this.versionAuditor = versionAuditor;
	}

	@Id
	@SequenceGenerator(name = "GEN_FUND", sequenceName = "SEQ_FUND", initialValue = 1, allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GEN_FUND")
	@Column(name = "FUND_ID", unique = true, nullable = false, length = 10)
	public long getId() {
		return this.id;
	}

	public void setId(long fundId) {
		this.id = fundId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "COMPANY_ID", nullable = false, foreignKey = @ForeignKey(name = "T_FUND_FK_COMPANY"))
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@Column(name = "FUND_NAME", nullable = false)
	public String getFundName() {
		return this.fundName;
	}

	public void setFundName(String fundName) {
		this.fundName = fundName;
	}

	@Column(name = "FUND_ISIN", length = 40)
	public String getFundIsin() {
		return this.fundIsin;
	}

	public void setFundIsin(String fundIsin) {
		this.fundIsin = fundIsin;
	}

	@Column(name = "FUND_CODE", length = 40)
	public String getFundCode() {
		return this.fundCode;
	}

	public void setFundCode(String fundCode) {
		this.fundCode = fundCode;
	}

	@Column(name = "FUND_DESC")
	public String getFundDesc() {
		return this.fundDesc;
	}

	public void setFundDesc(String fundDesc) {
		this.fundDesc = fundDesc;
	}

	@Column(name = "FUND_CLASS")
	public String getFundClass() {
		return this.fundClass;
	}

	public void setFundClass(String fundClass) {
		this.fundClass = fundClass;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fund")
	public Set<FundGroup> getFundGroups() {
		return this.fundGroups;
	}

	public void setFundGroups(Set<FundGroup> fundGroups) {
		this.fundGroups = fundGroups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fund")
	public Set<ReportExecution> getReportExecutions() {
		return this.reportExecutions;
	}

	public void setReportExecutions(Set<ReportExecution> reportExecutions) {
		this.reportExecutions = reportExecutions;
	}

	public int getVersion() {
		return version;
	}

	public void setVersion(int version) {
		this.version = version;
	}

	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

	public VersionAuditor getAuditor() {
		return versionAuditor;
	}

	public void setAuditor(VersionAuditor _auditor) {
		this.versionAuditor = _auditor;
	}

	@Override
	public boolean equals(Object object) {
		if (object instanceof Fund) {
			return ((Fund) object).fundName.equals(this.fundName)
					&& ((Fund) object).fundCode.equals(this.fundCode)
					&& ((Fund) object).fundIsin.equals(this.fundIsin)
					&& ((Fund) object).company.equals(this.company);

		}
		return false;
	}
}
