package com.entities.entity.reportingtool;

// Generated 11-feb-2015 17:15:14 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import com.entities.entity.loader.LoadFile;
import com.entities.utilities.hibernate.VersionAuditor;
import com.entities.utilities.hibernate.VersionableAdapter;

/**
 * ReportExecution generated by hbm2java
 */
@Entity
@Table(name = "T_REPORT_EXECUTION")
public class ReportExecution implements VersionableAdapter {

	private long id;
	private ReportCatalog reportCatalog;
	private Company company;
	private Fund fund;
	private String reportExecutionName;
	private String reportExecutionDesc;
	private String reportPeriodType;
	private String reportPeriodYear;
	private Date reportDueDate;
	private Date reportStartDate;
	private String reportStatus;
	private String signedUserFlag;
	private Date signedUserDate;
	private String signedUserId;
	private String signedSuperFlag;
	private Date signedSuperDate;
	private String signedSuperId;
	private String signedSentFlag;
	private Date signedSentDate;
	private String signedSentId;
	private String reportLocked;
	private Set<ReportData> reportDatas = new HashSet(0);
	private Set<ReportError> reportErrors = new HashSet(0);
	private Set<LoadFile> loadFiles = new HashSet(0);

	@Embedded
	private VersionAuditor versionAuditor;
	@Version
	@Column(name = "VERSION", nullable = false)
	int version;

	public ReportExecution() {
	}

	public ReportExecution(long reportExecutionId, ReportCatalog reportCatalog,
			Company company, String reportPeriodType, String reportPeriodYear,
			VersionAuditor versionAuditor) {
		this.id = reportExecutionId;
		this.reportCatalog = reportCatalog;
		this.company = company;
		this.reportPeriodType = reportPeriodType;
		this.reportPeriodYear = reportPeriodYear;
		this.versionAuditor = versionAuditor;
	}

	public ReportExecution(ReportCatalog reportCatalog, Company company,
			Fund fund, String reportExecutionName, String reportExecutionDesc,
			String reportPeriodType, String reportPeriodYear,
			Date reportDueDate, Date reportStartDate, String reportStatus,
			String signedUserFlag, Date signedUserDate, String signedUserId,
			String signedSuperFlag, Date signedSuperDate, String signedSuperId,
			String signedSentFlag, Date signedSentDate, String signedSentId,
			String reportLocked, Set<ReportData> reportDatas,
			Set<ReportError> reportErrors, VersionAuditor versionAuditor) {
		this.reportCatalog = reportCatalog;
		this.company = company;
		this.fund = fund;
		this.reportExecutionName = reportExecutionName;
		this.reportExecutionDesc = reportExecutionDesc;
		this.reportPeriodType = reportPeriodType;
		this.reportPeriodYear = reportPeriodYear;
		this.reportDueDate = reportDueDate;
		this.reportStartDate = reportStartDate;
		this.reportStatus = reportStatus;
		this.signedUserFlag = signedUserFlag;
		this.signedUserDate = signedUserDate;
		this.signedUserId = signedUserId;
		this.signedSuperFlag = signedSuperFlag;
		this.signedSuperDate = signedSuperDate;
		this.signedSuperId = signedSuperId;
		this.signedSentFlag = signedSentFlag;
		this.signedSentDate = signedSentDate;
		this.signedSentId = signedSentId;
		this.reportLocked = reportLocked;
		this.reportDatas = reportDatas;
		this.reportErrors = reportErrors;
		this.versionAuditor = versionAuditor;
	}

	@Id
	@SequenceGenerator(name = "GEN_REPORT_EXECUTION", sequenceName = "SEQ_REPORT_EXECUTION", initialValue = 1, allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GEN_REPORT_EXECUTION")
	@Column(name = "REPORT_EXECUTION_ID", unique = true, nullable = false, length = 10)
	public long getId() {
		return this.id;
	}

	public void setId(long reportExecutionId) {
		this.id = reportExecutionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "REPORT_CATALOG_ID", nullable = false, foreignKey = @ForeignKey(name = "T_REPORT_EXE_FK_CATALOG"))
	public ReportCatalog getReportCatalog() {
		return this.reportCatalog;
	}

	public void setReportCatalog(ReportCatalog reportCatalog) {
		this.reportCatalog = reportCatalog;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "COMPANY_ID", nullable = false, foreignKey = @ForeignKey(name = "T_REPORT_EXE_FK_COMPANY"))
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FUND_ID", foreignKey = @ForeignKey(name = "T_REPORT_EXE_FK_FUND"))
	public Fund getFund() {
		return this.fund;
	}

	public void setFund(Fund fund) {
		this.fund = fund;
	}

	@Column(name = "REPORT_EXECUTION_NAME", nullable = false, length = 100)
	public String getReportExecutionName() {
		return this.reportExecutionName;
	}

	public void setReportExecutionName(String reportExecutionName) {
		this.reportExecutionName = reportExecutionName;
	}

	@Column(name = "REPORT_EXECUTION_DESC")
	public String getReportExecutionDesc() {
		return this.reportExecutionDesc;
	}

	public void setReportExecutionDesc(String reportExecutionDesc) {
		this.reportExecutionDesc = reportExecutionDesc;
	}

	@Column(name = "REPORT_PERIOD_TYPE", nullable = false, length = 10)
	public String getReportPeriodType() {
		return this.reportPeriodType;
	}

	public void setReportPeriodType(String reportPeriodType) {
		this.reportPeriodType = reportPeriodType;
	}

	@Column(name = "REPORT_PERIOD_YEAR", nullable = false, length = 4)
	public String getReportPeriodYear() {
		return this.reportPeriodYear;
	}

	public void setReportPeriodYear(String reportPeriodYear) {
		this.reportPeriodYear = reportPeriodYear;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "REPORT_DUE_DATE", length = 7)
	public Date getReportDueDate() {
		return this.reportDueDate;
	}

	public void setReportDueDate(Date reportDueDate) {
		this.reportDueDate = reportDueDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "REPORT_START_DATE", length = 7)
	public Date getReportStartDate() {
		return this.reportStartDate;
	}

	public void setReportStartDate(Date reportStartDate) {
		this.reportStartDate = reportStartDate;
	}

	@Column(name = "REPORT_STATUS", length = 40)
	public String getReportStatus() {
		return this.reportStatus;
	}

	public void setReportStatus(String reportStatus) {
		this.reportStatus = reportStatus;
	}

	@Column(name = "SIGNED_USER_FLAG", length = 1)
	public String getSignedUserFlag() {
		return this.signedUserFlag;
	}

	public void setSignedUserFlag(String signedUserFlag) {
		this.signedUserFlag = signedUserFlag;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "SIGNED_USER_DATE", length = 7)
	public Date getSignedUserDate() {
		return this.signedUserDate;
	}

	public void setSignedUserDate(Date signedUserDate) {
		this.signedUserDate = signedUserDate;
	}

	@Column(name = "SIGNED_USER_ID", length = 40)
	public String getSignedUserId() {
		return this.signedUserId;
	}

	public void setSignedUserId(String signedUserId) {
		this.signedUserId = signedUserId;
	}

	@Column(name = "SIGNED_SUPER_FLAG", length = 1)
	public String getSignedSuperFlag() {
		return this.signedSuperFlag;
	}

	public void setSignedSuperFlag(String signedSuperFlag) {
		this.signedSuperFlag = signedSuperFlag;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "SIGNED_SUPER_DATE", length = 7)
	public Date getSignedSuperDate() {
		return this.signedSuperDate;
	}

	public void setSignedSuperDate(Date signedSuperDate) {
		this.signedSuperDate = signedSuperDate;
	}

	@Column(name = "SIGNED_SUPER_ID", length = 40)
	public String getSignedSuperId() {
		return this.signedSuperId;
	}

	public void setSignedSuperId(String signedSuperId) {
		this.signedSuperId = signedSuperId;
	}

	@Column(name = "SIGNED_SENT_FLAG", length = 1)
	public String getSignedSentFlag() {
		return this.signedSentFlag;
	}

	public void setSignedSentFlag(String signedSentFlag) {
		this.signedSentFlag = signedSentFlag;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "SIGNED_SENT_DATE", length = 7)
	public Date getSignedSentDate() {
		return this.signedSentDate;
	}

	public void setSignedSentDate(Date signedSentDate) {
		this.signedSentDate = signedSentDate;
	}

	@Column(name = "SIGNED_SENT_ID", length = 40)
	public String getSignedSentId() {
		return this.signedSentId;
	}

	public void setSignedSentId(String signedSentId) {
		this.signedSentId = signedSentId;
	}

	@Column(name = "REPORT_LOCKED", length = 1)
	public String getReportLocked() {
		return this.reportLocked;
	}

	public void setReportLocked(String reportLocked) {
		this.reportLocked = reportLocked;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "reportExecution")
	@OrderBy("reportField ASC")
	@Cascade({ CascadeType.SAVE_UPDATE })
	public Set<ReportData> getReportDatas() {
		return this.reportDatas;
	}

	public void setReportDatas(Set<ReportData> reportDatas) {
		this.reportDatas = reportDatas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "reportExecution")
	@Cascade({ CascadeType.SAVE_UPDATE })
	public Set<ReportError> getReportErrors() {
		return this.reportErrors;
	}

	public void setReportErrors(Set<ReportError> reportErrors) {
		this.reportErrors = reportErrors;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "T_FILE_ASSIG_EXECUTION", joinColumns = { @JoinColumn(name = "REPORT_EXECUTION_ID", referencedColumnName = "REPORT_EXECUTION_ID") }, inverseJoinColumns = { @JoinColumn(name = "LOAD_FILE_ID", referencedColumnName = "LOAD_FILE_ID") })
	public Set<LoadFile> getLoadFiles() {
		return loadFiles;
	}

	public void setLoadFiles(Set<LoadFile> loadFiles) {
		this.loadFiles = loadFiles;
	}

	public int getVersion() {
		return version;
	}

	public void setVersion(int version) {
		this.version = version;
	}

	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

	public VersionAuditor getAuditor() {
		return versionAuditor;
	}

	public void setAuditor(VersionAuditor _auditor) {
		this.versionAuditor = _auditor;
	}

	@Override
	public boolean equals(Object object) {
		if (object instanceof ReportExecution) {
			boolean ret = ((ReportExecution) object).getCompany().equals(
					this.company)
					&& ((ReportExecution) object).getReportCatalog().equals(
							this.reportCatalog)
					&& ((ReportExecution) object).getReportExecutionName()
							.equals(this.reportExecutionName)
					&& ((ReportExecution) object).getReportPeriodType().equals(
							this.reportPeriodType)
					&& ((ReportExecution) object).getReportPeriodYear().equals(
							this.reportPeriodYear);
			if (((ReportExecution) object).getFund() == null
					&& this.fund == null) {
				// return ret;
			} else {
				// one or two reportExecution can be null
				if (this.fund == null
						&& ((ReportExecution) object).getFund() != null) {
					ret = false;
					if (this.fund != null
							&& ((ReportExecution) object).getFund() == null) {
						ret = false;
					} else {
						ret = ret
								&& ((ReportExecution) object).getFund().equals(
										this.fund);
					}
				}
			}
			return ret;
		}
		return false;
	}

}
