package com.entities.entity.reportingtool;

// Generated 11-feb-2015 16:49:54 by Hibernate Tools 4.0.0

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Version;

import com.entities.utilities.hibernate.VersionAuditor;
import com.entities.utilities.hibernate.VersionableAdapter;

/**
 * FundGroup generated by hbm2java
 */
@Entity
@Table(name = "T_FUND_GROUP")
public class FundGroup implements VersionableAdapter {

	private long id;
	private Fund fund;
	private Department department;
	private String fundGroupCode;
	private String fundGroupDesc;

	@Embedded
	private VersionAuditor versionAuditor;
	@Version
	@Column(name = "VERSION", nullable = false)
	int version;

	public FundGroup() {
	}

	public FundGroup(long fundGroupId, Fund fund, Department department,
			VersionAuditor versionAuditor) {
		this.id = fundGroupId;
		this.fund = fund;
		this.department = department;
		this.versionAuditor = versionAuditor;
	}

	public FundGroup(Fund fund, Department department, String fundGroupCode,
			String fundGroupDesc, VersionAuditor versionAuditor) {
		this.fund = fund;
		this.department = department;
		this.fundGroupCode = fundGroupCode;
		this.fundGroupDesc = fundGroupDesc;
		this.versionAuditor = versionAuditor;
	}

	@Id
	@SequenceGenerator(name = "GEN_FUND_GROUP", sequenceName = "SEQ_FUND_GROUP", initialValue = 1, allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GEN_FUND_GROUP")
	@Column(name = "FUND_GROUP_ID", unique = true, nullable = false, length = 10)
	public long getId() {
		return this.id;
	}

	public void setId(long fundGroupId) {
		this.id = fundGroupId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FUND_ID", nullable = false, foreignKey = @ForeignKey(name = "T_FUND_GROUP_FK_FUND"))
	public Fund getFund() {
		return this.fund;
	}

	public void setFund(Fund fund) {
		this.fund = fund;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DEPARTMENT_ID", nullable = false, foreignKey = @ForeignKey(name = "T_FUND_GROUP_FK_DEPT"))
	public Department getDepartment() {
		return this.department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	@Column(name = "FUND_GROUP_CODE", length = 40)
	public String getFundGroupCode() {
		return this.fundGroupCode;
	}

	public void setFundGroupCode(String fundGroupCode) {
		this.fundGroupCode = fundGroupCode;
	}

	@Column(name = "FUND_GROUP_DESC")
	public String getFundGroupDesc() {
		return this.fundGroupDesc;
	}

	public void setFundGroupDesc(String fundGroupDesc) {
		this.fundGroupDesc = fundGroupDesc;
	}

	public int getVersion() {
		return version;
	}

	public void setVersion(int version) {
		this.version = version;
	}

	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

	public VersionAuditor getAuditor() {
		return versionAuditor;
	}

	public void setAuditor(VersionAuditor _auditor) {
		this.versionAuditor = _auditor;
	}

	@Override
	public boolean equals(Object object) {
		if (object instanceof FundGroup) {
			return ((FundGroup) object).getDepartment().equals(this.department)
					&& ((FundGroup) object).getFund().equals(this.fund)
					&& ((FundGroup) object).getFundGroupCode().equals(
							this.fundGroupCode);

		}
		return false;
	}

}
