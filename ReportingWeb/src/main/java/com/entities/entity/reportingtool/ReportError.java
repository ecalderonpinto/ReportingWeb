package com.entities.entity.reportingtool;

// Generated 11-feb-2015 17:15:14 by Hibernate Tools 4.0.0

import com.entities.entity.common.Error;
import com.entities.utilities.hibernate.VersionAuditor;
import com.entities.utilities.hibernate.VersionableAdapter;

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Version;

/**
 * ReportError generated by hbm2java
 */
@Entity
@Table(name = "T_REPORT_ERROR")
public class ReportError implements VersionableAdapter {

	private long id;
	private Error error;
	private ReportExecution reportExecution;
	private String reportErrorType;
	private String reportErrorText;

	@Embedded
	private VersionAuditor versionAuditor;
	@Version
	@Column(name = "VERSION", nullable = false)
	int version;

	public ReportError() {
	}

	public ReportError(long reportErrorId, Error error,
			ReportExecution reportExecution, String reportErrorType,
			VersionAuditor versionAuditor) {
		this.id = reportErrorId;
		this.error = error;
		this.reportExecution = reportExecution;
		this.reportErrorType = reportErrorType;
		this.versionAuditor = versionAuditor;
	}

	public ReportError(Error error, ReportExecution reportExecution,
			String reportErrorType, String reportErrorText,
			VersionAuditor versionAuditor) {
		this.error = error;
		this.reportExecution = reportExecution;
		this.reportErrorType = reportErrorType;
		this.reportErrorText = reportErrorText;
		this.versionAuditor = versionAuditor;
	}

	@Id
	@SequenceGenerator(name = "GEN_REPORT_ERROR", sequenceName = "SEQ_REPORT_ERROR", initialValue = 1, allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GEN_REPORT_ERROR")
	@Column(name = "REPORT_ERROR_ID", unique = true, nullable = false, length = 10)
	public long getId() {
		return this.id;
	}

	public void setId(long reportErrorId) {
		this.id = reportErrorId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ERROR_ID", nullable = false, foreignKey = @ForeignKey(name = "T_REPORT_ERROR_FK_ERROR"))
	public Error getError() {
		return this.error;
	}

	public void setError(Error error) {
		this.error = error;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "REPORT_EXECUTION_ID", nullable = false, foreignKey = @ForeignKey(name = "T_REPORT_ERROR_FK_REPORT"))
	public ReportExecution getReportExecution() {
		return this.reportExecution;
	}

	public void setReportExecution(ReportExecution reportExecution) {
		this.reportExecution = reportExecution;
	}

	@Column(name = "REPORT_ERROR_TYPE", nullable = false, length = 40)
	public String getReportErrorType() {
		return this.reportErrorType;
	}

	public void setReportErrorType(String reportErrorType) {
		this.reportErrorType = reportErrorType;
	}

	@Column(name = "REPORT_ERROR_TEXT")
	public String getReportErrorText() {
		return this.reportErrorText;
	}

	public void setReportErrorText(String reportErrorText) {
		this.reportErrorText = reportErrorText;
	}

	public int getVersion() {
		return version;
	}

	public void setVersion(int version) {
		this.version = version;
	}

	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

	public VersionAuditor getAuditor() {
		return versionAuditor;
	}

	public void setAuditor(VersionAuditor _auditor) {
		this.versionAuditor = _auditor;
	}

	@Override
	public boolean equals(Object object) {
		if (object instanceof ReportError) {
			return ((ReportError) object).error.equals(this.error)
					&& ((ReportError) object).reportErrorText
							.equals(this.reportErrorText)
					&& ((ReportError) object).reportErrorType
							.equals(this.reportErrorType)
					&& ((ReportError) object).reportExecution
							.equals(this.reportExecution);

		}
		return false;
	}
}
