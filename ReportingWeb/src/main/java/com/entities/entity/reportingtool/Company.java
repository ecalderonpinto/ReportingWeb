package com.entities.entity.reportingtool;

// Generated 11-feb-2015 16:49:54 by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Version;

import com.entities.utilities.hibernate.VersionAuditor;
import com.entities.utilities.hibernate.VersionableAdapter;

/**
 * Company generated by hbm2java
 */
@Entity
@Table(name = "T_COMPANY")
public class Company implements VersionableAdapter {

	private long id;
	private String companyName;
	private String companyCountry;
	private String companyCode;
	private String companyDesc;
	private Set<ReportExecution> reportExecutions = new HashSet(0);
	private Set<Fund> funds = new HashSet(0);
	private Set<Department> departments = new HashSet(0);
	private Set<ReportCustom> reportCustoms = new HashSet(0);

	@Embedded
	private VersionAuditor versionAuditor;
	@Version
	@Column(name = "VERSION", nullable = false)
	int version;

	public Company() {
	}

	public Company(long companyId, String companyName,
			VersionAuditor versionAuditor) {
		this.id = companyId;
		this.companyName = companyName;
		this.versionAuditor = versionAuditor;
	}

	public Company(String companyName, String companyCountry,
			String companyCode, String companyDesc,
			Set<ReportExecution> reportExecutions, Set<Fund> funds,
			Set<Department> departments, Set<ReportCustom> reportCustoms,
			VersionAuditor versionAuditor) {
		this.companyName = companyName;
		this.companyCountry = companyCountry;
		this.companyCode = companyCode;
		this.companyDesc = companyDesc;
		this.reportExecutions = reportExecutions;
		this.funds = funds;
		this.departments = departments;
		this.reportCustoms = reportCustoms;
		this.versionAuditor = versionAuditor;
	}

	@Id
	@SequenceGenerator(name = "GEN_COMPANY", sequenceName = "SEQ_COMPANY", initialValue = 1, allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GEN_COMPANY")
	@Column(name = "COMPANY_ID", unique = true, nullable = false, length = 10)
	public long getId() {
		return this.id;
	}

	public void setId(long companyId) {
		this.id = companyId;
	}

	@Column(name = "COMPANY_NAME", nullable = false)
	public String getCompanyName() {
		return this.companyName;
	}

	public void setCompanyName(String companyName) {
		this.companyName = companyName;
	}

	@Column(name = "COMPANY_COUNTRY")
	public String getCompanyCountry() {
		return this.companyCountry;
	}

	public void setCompanyCountry(String companyCountry) {
		this.companyCountry = companyCountry;
	}

	@Column(name = "COMPANY_CODE", length = 40)
	public String getCompanyCode() {
		return this.companyCode;
	}

	public void setCompanyCode(String companyCode) {
		this.companyCode = companyCode;
	}

	@Column(name = "COMPANY_DESC")
	public String getCompanyDesc() {
		return this.companyDesc;
	}

	public void setCompanyDesc(String companyDesc) {
		this.companyDesc = companyDesc;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "company")
	public Set<ReportExecution> getReportExecutions() {
		return this.reportExecutions;
	}

	public void setReportExecutions(Set<ReportExecution> reportExecutions) {
		this.reportExecutions = reportExecutions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "company")
	public Set<Fund> getFunds() {
		return this.funds;
	}

	public void setFunds(Set<Fund> funds) {
		this.funds = funds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "company")
	public Set<Department> getDepartments() {
		return this.departments;
	}

	public void setDepartments(Set<Department> departments) {
		this.departments = departments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "company")
	public Set<ReportCustom> getReportCustoms() {
		return this.reportCustoms;
	}

	public void setReportCustoms(Set<ReportCustom> reportCustoms) {
		this.reportCustoms = reportCustoms;
	}

	public int getVersion() {
		return version;
	}

	public void setVersion(int version) {
		this.version = version;
	}

	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

	public VersionAuditor getAuditor() {
		return versionAuditor;
	}

	public void setAuditor(VersionAuditor _auditor) {
		this.versionAuditor = _auditor;
	}

	@Override
	public boolean equals(Object object) {
		if (object instanceof Company) {
			return ((Company) object).companyName.equals(this.companyName)
					&& ((Company) object).companyCode.equals(this.companyCode)
					&& ((Company) object).companyCountry
							.equals(this.companyCountry);

		}
		return false;
	}
}
